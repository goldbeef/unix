kernel's function
    process schedule
    memory manage 
    file-system
    process manage
    access for device
    network 
    system-api
------------------------------------------------
program run-state
    kernel-state
    user-state
shell 
    sh 
    bash 
    csh
    ksh
------------------------------------------------
user and group
    user 
        user-id
        home-dirctory
        login-shell
        ---------------------
        useradd goldbeef [-d home-dirctory]
        passwd golddbeef 
    group
        group-id
        group-name
    root
------------------------------------------------
file 
    file-type
    file-path
    link
        symbol-link
            cross file-system
        hard-link
    ---------------------
    file-auth
        u,g,o
        r,w,x
    ---------------------
    file i/o mode
        treated as byte stream 
------------------------------------------------
process 
    .text 
    .data 
    .bss 
    .stack 
    .heap 
    ---------------------
    pid, ppid
    exec ...
    exit
    _exit
    ---------------------
    real user-id 
    real group-id 

    effective user-id 
    effective group-id
    ---------------------
    init process
        pid = 1
        /sbin/init 
    ---------------------
    daemon process 
        ppid = 1
    ---------------------
    environment-list
        export key=value 
    ---------------------
    mmap
        file-mmaping
            for file i/o 
            for IPC
        anonymous-mapping
            for IPC
            memory alloc
------------------------------------------------
static-lib 
    waste for disk and memory
    problem for software update
shared-lib 
    safe for disk and memory
    easy for software update
------------------------------------------------
IPC (internal process communication)
    signal
    pipe
    fifo 
    socket
    file-lock
    mesage-queue
    semaphore
    shared-memory
------------------------------------------------
signal 
    SIG_xxx
    ---------------------
    signal control
        default operation
        ignore
        signal handler
    ---------------------
------------------------------------------------
thread
/proc file-system 
------------------------------------------------
system-api
    call system-api
    trigger user-state to kernel-state
    int 80
    return back to user-state
------------------------------------------------
glibc 
    ldd programname|grep glibc 
    /lib/i386-linux-gnu/libc.so.6 
    ---------------------
    __GLIBC__
    __GLIBC_MINOR__
------------------------------------------------
error-process 
    #include <errno.h>
    extern int errno;
    ---------------------
    void perror(const char* msg);
    char* strerror(int errno);
    ---------------------
    for thread 
        erron is a MACORO
------------------------------------------------
transplant for system-api programming
    use test macoro
        #define _BSD_SOURCE  
        ---------------------
        gcc -D_BSD_SOURCE
    ---------------------
    system-type print  
        typedef int pid_t;
        printf("pid[%d]", (int)pid)
    system-type init 
        
------------------------------------------------
file I/O
    --------------------- 
    FILE *freopen(const char *path, const char *mode, FILE *stream);
    ---------------------
    file-discriptor
        0   STDIN_FILENO    stdin
        1   STDOUT_FILENO   stdout 
        2   STDERR_FILENO   stderr 
    ---------------------
    file system-api
        int open(const char *pathname, int flags);
        int open(const char *pathname, int flags, mode_t mode);
            flags: 
                O_RDONLY 
                O_WRONLY
                O_RDWR 
                O_CLOEXEC
                    close-on-exec
                O_CREATE
                O_EXCL
                    along with O_CREATE to check if exist
                O_NOCTTY
                O_NONBLOCK
        int creat(const char *pathname, mode_t mode);
        ssize_t read(int fd, void *buf, size_t count);
        ssize_t write(int fd, const void *buf, size_t count);
        int close(int fd);
        off_t lseek(int fd, off_t offset, int whence);
            whence
                SEEK_SET
                SEEK_CUR
                SEEK_END
        ---------------------
    ---------------------
    file hole 
        exceed to end of file by lseek 
        ---------------------
        not wate disk-block
    ---------------------
------------------------------------------------
deep into file-i/o
    race-condition
    atom-operation
    ---------------------
    create file atom-operation
        open, O_EXCL|O_CREATE
    append data atom-operation
        open, O_APPEND
    ---------------------
    file control operation
        int fcntl(fd, int cmd, ...)
            cmd 
                F_GETFL
                F_SETFL
    ---------------------
    内核维护的文件相关数据结构
        文件描述服表：
            process-level
            ---------------------
            file-discriptor mark 
                close-on-exec
            file-handler ref
        打开文件表：
            OS-level
            ---------------------
            file-offset
            file-stat-flag
                open 
            file-access-mode
            signal-related set 
            i-node ref 
        i-node表：
            file-system-level
            ---------------------
            file-type
            lock-list 
            file-basic-property
    ---------------------
    复制文件表述符
        int dup(int oldfd);
        
        int dup2(int oldfd, int newfd);
        int fcntl(int oldfd, F_DUPFD, int newfd);

        int dup3(int oldfd, int newfd, int flags)
            O_CLOEXEC
        int fcntl(...);
            F_DUPFD_CLOEXEC
    ---------------------
    ssize_t pread(int fd, void* buff, size_t count, off_t offset);
    ssize_t pwrite(int fd, void* buff, size_t count, off_t offset);
    ---------------------
    ssize_t readv(int fd, const struc iovec* iov, int iovcount);
    ssize_t writev(int fd, const struc iovec* iov, int iovcount);
        --------------------- 
        struct iovec 
        {
            void* iov_base;
            size_t iov_len;
        }
    -------------------------
    ssize_t preadv(int fd, const struc iovec* iov, int iovcount, off_t offset);
    ssize_t owritev(int fd, const struc iovec* iov, int iovcount, off_t offset);
    ---------------------
    int truncate(const char* pathname, off_t length);
    int ftruncate(int fd, off_t length);
        //may result in file-whole
    -------------------------
    large-file-i/o
        LFS-API
            xxx64(...)
        ---------------------
        FILE_OFFSET_BITS=64
            #define FILE_OFFSET_BITS 64 
            gcc -D_FILE_OFFSET_BITS=64 
    ---------------------
    /dev/fd/xx  --> /proc/self/fd/xx 
    /dev/stdxxx --> /proc/self/fd/xxx 
        use in shell: no need to special control '-'
            ls |diff /dev/fd/0 oldfilleList
    -------------------------
    int mkstemp(char* template);
        easy to use 
    FILE* tmpFile(void);

------------------------------------------------
process
    pid_t getpid(void);
        pid_t num: linux set max 32767
            /process/sys/kernel/max_pid
            once up to max-limit, then reset to 300 (1-300 for special use)
        process-status
            /proc/pidnum/status
                include process-status in detail
    pid_t getppid(void);
        pstree [-p pid]
            get proces-tree
    ---------------------
    process-addr-space
        text
        data
        bss
        stack
        heap
        argv/env
        kernel-space 
    size elf-file
        get sections and size 
    ---------------------
    virtual-addr-space
        use spatial-locality and temporal-locality
        ---------------------
        page-size
            4094
        process 
            page-table
                store in RAM-AREA or SWAP-AREA
                virtual-addr-space --> physiacal-page , by PMMU(page memory manage unit)
    ---------------------
    stack
    ---------------------
    argc/argv 
        /proc/pidnum/cmdline
    -------------------------
    environment-list
        add env-var long time:
            SHELL=/bin/bash
            export SHELL 

            exprot SHELL=/bin/bash 
        add env-var tmporal time:
            key1=val1 key2=val2 programname
        ---------------------
        get env-var
            global var 
                char** environ;

            main(int argc, char* argv[], char* envp[])
            
            char* getenv(const char*  name);

        ---------------------
        set env-var
            int putenv(char* string);
                string not stored in stack 
            int setenv(const char* name, const char* value, int overwrite);
        ---------------------
        unset env-var 
            int unitenv(const char* name);
            int clearenv(void);
    ---------------------
    no-local jump
        int setjmp(jmp_buf env);
        void longjmp(jump_buf env, int val);
        ---------------------
        abuse longjmp
            jump to a returned-stack-frame: will crash
        use volatile
            avoid compiler to doing some-perf
------------------------------------------------
memory-alloc
    program-break
        int brk(void* end_data_segment);
        void *sbrk(intptr_t increment);
    ---------------------
    heap-memory-alloc
        void* malloc(size_t size);
            easy to use 
        void  free(void* ptr);
            will not decrease program-break generally
        ---------------------
        implement
            malloc 
                alloc form avaliable-free-queue
            free 
                free to avaliable-free-queue
        ---------------------
        malloc-debug tool
            mtrace(), muntrace()
                with MALLOC_TRACE
            mcheck(), mprobe()
                with cc-lmcheck
            MALLOC_CHECK
        ---------------------
        mallopt()
        mallinfo()
    ---------------------
    void* calloc(size_t numitems, size_t size);
    void* realloc(void* ptr, size_t size);
    ---------------------
    allign
        void* memalign(size_t boundary, size_t size);
        int posix_memalign(void** memptr, size_t allign, size_t size);
    ---------------------
    void* alloc(size_t size);
        //from stack to get memory
        //should not use in function-param
        // foo(alloc(100));
        ---------------------
        special use 
            in longjmp to avoid memory-sleek
------------------------------------------------
file-system  (207)
    device-type 
        character-device
        block-device
    device-id 
        primary-device-id  (12 bits)
        auxiliary-device-id (20 bits)
    device-file --> i-node's device-id --> drive-program
    -------------------------
    disk 
        disk-device
        disk-partition
            file-system 
            data-area
            swap-area 
    -------------------------
    ext2-file-system 
        intro-block | super-block | i-node-list | data-block
        ---------------------
        i-node 
            file-type
            file-auth 
            ..
            hard-link
            file-size 
            file-block
        ---------------------
        i-node entry: total 15 ptr 
            ptr[0-11] 
                point to data-block 
            ptr[12] 
                point to IPB 
            ptr[13]
                point to 2IPB 
            ptr[14]
                point to 3IPP
        max-file size: 
            (data-block-size/ptr-size)^3*data-block-size
        ---------------------
        weakness
            check of file-system with low performance
    -------------------------
    virtual-file-system (VFS)
    -------------------------
    log-file-system
        high-performance
        ---------------------
        ext3
        ext4
    -------------------------
    mount  device directory
        /proc/mounts 
            linux 
        /etc/fstab 
        /etc/mtab 
        ---------------------
        #include <sys/mount.h>
        int mount(const char* source, const char* target, const char* fstype, long mountflags, const void* data);
        int umount(const char* target)
        int umount2(const char* target, int flags)
        ---------------------
        advanced-mount-character
            one file-system  --> multi-mount-points
            mount-flags for once 
            bind-mount 
                mount --bind src dst
                used for jail
            rec-mount
                mount --rbind
    ---------------------
    virtual-addr-space
        tmpfs
            based on memory /swap 
            used for system-V-IPC | posix-IPC
        ---------------------
        mount -t tmpfs src dst
    ---------------------
    statvfs
    fstatvfs
------------------------------------------------
file-property
    stat 
    fstat 
    lstat 
    ---------------------
    struct stat 
    {
        ....
    }

    .st_dev
        device-id
    .st_nlink
        hard-link
    .st_mode 
    .st_size
    .st_blocks 
    .st_blksize
        for i/o optimization
    ---------------------
    .st_atime
    .st_mtime
    .st_ctime

    api to change timestamp
        utime 
            struct utimbuf 
        utimes
            struct timeval
        futimes
            struct timeval 
        lutimes 
            struct timeval 
        utimestat
            struct timespec
        futimens 
            struct timespec 
    ---------------------
    file-owner
        create-file 
            file-user-id
                set process's euid
            file-group-id
                set process's ugid 
                    file-system with nogroup and no-set-gid
                    -o nogrpid | -o sysvgroups
                inherit form upper-directory
                    -o grpid | -o bsdgroups
                    upper-directory with g+s
        ---------------------
        change file-owner
            chown
            lchown
            fchown
            ---------------------
            remove directory's g+s if need 
        -------------------------
    -------------------------
    file-auth
        regular-file
            user/group/other read/write/exec 
            user+s group+s +T 
        directory-file 
            user/group/other read/write/exec 
            user+s group+s +T 
    -------------------------
    access 
        with real-id 
    ------------------------------------------------
    set-gid
        for elf-exec with privillege auth
        new-file's gid inherit form upper-directory for file-system
        for file-lock 
    sticky
        for elf-exec file in SWAP-AREA
        for remove file restricion
            /tmp 
    -------------------------
    umask 
    -------------------------
    change file-auth 
        chmod 
        fchmod
    ---------------------
    i-node-extend-flag 
        lsattr
        chattr 
------------------------------------------------
file-system-extend-property
    extend-attr (EA)
        255 character 
        64 k
    ---------------------
    namespace.name 
        user EA 
        trusted EA 
        system EA 
        security EA 
    ---------------------
    setfattr
    getfattr
    -------------------------
    api 
        setxattr
        lsetxattr
        fsetxattr

        getxattr
        lgetxattr
        fgetxattr

        removexattr
        lremovexattr
        fremovexattr 

        listxattr 
        llistxattr
        flistxattr
------------------------------------------------
directory and link 
    hard-link
        ln src dst 
        ls -ai dst
        not cross file-system 
        ---------------------
        api 
            link 
            unlink
            rename
        when all unlink, and process's file-discriptor is all closed, delete file-data
    ---------------------
    process's open file 
        /proc/pid/fd/xxx 
        lsof -p pid 
        fuser 
    ---------------------
    soft-link
        ln -s src dst 
        ls -F  #@
        cross file-system
            _POSIX_SYMLOOP_MAX 8
        ---------------------
        for path's directory part, always de-refrence
        for path's basename part, depend api (stat/lstat)
        ---------------------
        api 
            symlink
            readlink
    -------------------------
    directory 
        api 
            mkdir 
            rmdir

            opendir
            fdopendir

            readdir
            readdir_t

            rewinddir
            closedir

            dirfd

            nftw

            getcwd

            chdir
            fchdir

            openat
                very strong 
            chroot
                for ftp
        ---------------------
        struct dirent
        {
            ino_t ino;
            char d_name[];
        }
    -------------------------
    glibc 
        remove
    -------------------------
    path-resolve
        api 
            realpath
            dirname
            basename 
------------------------------------------------
watch-file-event  (only linux 2.6)
    inotify 
        api 
            inotify_init
            inotify_add_watch
            inotify_rm_watch 
        ---------------------
        event 
            IN_XXX
        -------------------------
        struct inotify_event
        {
            int wd;
            uint32_t mask;
            uint32_t cookie;
            uint32_t len;
            char name[];
        }
        ---------------------
        limits
            /proc/sys/fs/inotify/XXX 
            ---------------------
            max_queued_events
            max_user_instances
            max_user_watches
    ---------------------
    dnotify
        too old ... 
------------------------------------------------
signal 
    signal-generate
        hardware
        keybord (ctrl+c, ctrl+z, ctrl+\)
        other soft-interrupt 
    ---------------------
    signal-type
        traditional-sig (1-31)
        realtime-sig
    ---------------------
    signal-state
        pending
            after generating, before delervery
    ---------------------
    signal-operation
        ignore 
        kill
        coredump
        stop 
        continue
    ---------------------
    signal-handler
        default 
        ignore 
        user-defined-handler
    ---------------------
    /proc/pid/status 
        SigPnd
        SigBlk
        SigIgn 
        sigCgt 
    ---------------------
    man 7 signal 
        SIGKILL
        SIGSTOP
        SIGTERM
            default by kill 
        SIGUSR1 
        SIGUSR2 
    ---------------------
    set signal-handler
        #include <signal.h>
        typedef void (sighandler_t*) (int);
        sighandler_t signal(int sig, sighandler_t sigHandler);
        ---------------------
        special signal-handler
            SIG_ERR
            SIG_DEF
            SIG_IGN
        ---------------------
        #include <signal.h>
        int sigaction(int sig, const struct sigaction* act, struct sigaction* oldact);
            ---------------------
            struct sigaction
            {
                union
                {
                    void (*sa_handler) (int);
                    void (*sa_sigaction)(int, siginfo_t*, void*);
                }__sigaction_handler;

                sigset_t sa_mask;
                int sa_flags;
                void (*sa_restorer) (void);
            }

            #define sa_handler __sigaction_handler.sa_handler;
            #define sa_sigaction __sigaction_handler.sa_sigaction;

            ---------------------
            sa_flags
                SA_SIGCHLD
                SA_RESETHAND
                SA_RESTART
                SA_SIGINFO
                    ---------------------
                    sa_sigaction 
                    ---------------------
                    typedef struct
                    {
                        ....
                    }siginfo_t;

    ---------------------
    signal-send
        #include <signal.h>
        int kill(pid_t pid, int sig);
        int raise(int sig);
        int pthread_kill(pthread_t tid, int sig);
        int killpg(pid_t prgp, int sig);
        ---------------------
        auth-check
            real-user-id --> <real-user-id, saved set-user-id>
            effective-user-id --> <real-user-id, safe set-user-id>
    ---------------------
    check-process-existence
        send signal (signo = 0)
        wait
        semaphore or other lock 
        FIFO or other IPC 
        /proc/pid/ 
    ---------------------
    signal-show
        #include <string.h>
        char* strsignal(int sig);
        ---------------------
        #include <signal.h>
        extern const char* const sys_siglist[];
        ---------------------
        #include <signal.h>
        void psignal(int sig, const char* msg);
          
    ---------------------
    signal-set 
        #include <signal.h>
        int sigemptyset(sigset_t *set);
        int sigfillset(sigset_t *set);

        int sigaddset(sigset_t * set);
        int sigdelset(sigset_t* set);
        int sigismember(const sigset_t* set, int sig);
        
        int sigandset(sigset_t* set, sigset_t* left, sigset_t* right);
        int sigorset(sigset_t* set, sigset_t* left, sigset_t* right);
        int sigisemptyset(const sigset_t* set);
    ---------------------
    sig-mask
        #include <signal.h>
        int sigprocmask(int how, const sigset_t* set, sigset_t* oldset);
            SIG_BLOCK
            SIG_UNBLOCK
            SIG_SETMASK
    ---------------------
    sig-pending
        #include <signal.h>
        int sigpending(sigset_t* set);
        ---------------------
        traditional-sig not support QUEUE
    ---------------------
    pause
        #include <unistd.h>
        int pause(void);
------------------------------------------------
sig-handler-function
    common design
        1. mark global flags, and return 
        2. do clear job, and terminate process or do no-local jump;
    ---------------------
    reentrant-function
        mult-thread call funtion safely 
    async-signal-safe-functionn
        call function in sig-handler-function safely 
        ---------------------
        two type 
            reentrant-function
            function can't  be interrupted by signal 
    ---------------------
    volatile sig_atomic_t flag;
    ---------------------
    terminate sig-handler-function
        _exit();
        kill();
        longjmp();
        abort();
    ---------------------
    sig-handler-function no-local jump 
        #include <setjmp.h>
        int sigsetjmp(sigjmp_buf env, int savesigs);
        void siglongjmp(sigjmp_buf env, int val);
    ---------------------
    #include <stdlib.h>
    void abort(void);
        SIGABRT
    ---------------------
    #include <signal.h>
    int sigaltstack(const stack_t* sigstack, stack_t* old_sigstack);
        ---------------------
        typedef struct
        {
            void * ss_sp;
            int ss_flags; 
            size_t ss_size;
        }
        ---------------------
        ss_flags
            SS_ONSTACK
            SS_DISABLE
        ss_size
            SIGSTKSZ 
        ---------------------
        set sigaction.sa_flags
            SA_ONSTACK
        
------------------------------------------------
system-api interrupted and restart
    ---------------------
    while ((cnt = read(fd, buf, BUF_SIZE)) == -1 && errno == EINTR)
    {
        continue;
    }
    ---------------------
    sigaction
        SA_RESTART

------------------------------------------------
signal-advanced
    coredump 
        ctrl + \
        ---------------------
        ulimic -c 1024|unlimited
        ---------------------
        /proc/pid/coredump_filter
        man 5 core 
        ---------------------
        /proc/sys/kernel/core_pattern 
    --------------------- 
    special-sig
        SIGKILL/SIGSTOP 
            can not change default signal-operation 
        ---------------------
        SIGCONT 
            can not change default signal-operation 
            once catch SIGCONT, remove off pending SIGSTOP 
        SIGSTOP 
            once catch SIGSTOP, remove off pending SIGCONT 
        terminal-ignored-sig
            should not change the operation of terminal-ignored-sig
    ---------------------
    process-sleep-state
        TASK_INTERRUPTIBLE
        TASK_UNINTERRUPTIBLE
        TASK_KILLABLE (linux 2.6)
    ---------------------
    hardware-sig
        SIGBUS/SIGFPE/SIGILL/SIGSEGV 
        ---------------------
        serveral operation
            return from sig-handler-function
            ignore signal  (linux force delervery signal )
            block signal (linux forece kill process)
        ---------------------
        proper operation
            the default operation (terminate process)
            no return signal-handler (terminate process)
            no-local jump 
    ---------------------
    signal-generate-ways
        async (other process's kill)
        sync (self kill)
    ---------------------
    signal-delivery-time
        re-scheduled moment
        finished-system-all moment 
    ---------------------
    signal-delivery-order
        order by signum (linux) 
        if  system-api is called in signal-handler, then may jump into an other signal-handler
    ---------------------
    old-signal 
        signal-handler is reset the default operation when in signal-handler
        no block the signal when in signal-handler
        not support restart option 
        ---------------------
        glic2 support new-signal
        ---------------------
        #include <signal.h>
        sighandler_t sysv_signal(int, sighandler_t);
            support old-signal 
    ---------------------
    realtime-sig
        SIGRTMIN ~ SIGRTMAX
        support queue option 
            SIGQUEUE_MAX
            RLIMIT_SIGPENDING
            /proc/pid/status SigQ
        spport accompany data 
        delervery-order is sured 
        ---------------------
        use realtime-sig
            sender 
                sigqueue 
                kill/killpg/raise (linux support receiver's queued) 
            receiver
                SA_SIGINFO 
        ---------------------
        #include <signal.h>
        int sigqueue(pid_t pid, int sig, const union sigval value);
            ---------------------
            union sigval 
            {
                int sival_int;
                void* sival_ptr;
            }
    ---------------------
    sigsuspend
        #include <signal.h>
        int sigsuspend(const sigset_t* mask);
            ---------------------
            temporally replace sig-mask and suspend the process;
            until signal-handler is triggered,  then recover the previous sig-mask 
        ---------------------
        eqult to -->
            sigprocmask(SIG_SETMASK, &mask, &prevMask);
            pause();
            sigprocmask(SIG_SETMASK, &prevMask, NULL);
        ---------------------
        use secne
            1. temporally block a signal;
            2. do cricial code fragment;
            3. unblock the previous signal and suspend the process, until signal is caught
        ---------------------
        async wait for signal 
    ---------------------
    sigwait
        sync wait for signal 
        ---------------------
        #include <signal.h>
        int sigwait(const sigset_t* set, int* sig);
        int sigwaitinfo(const sigset_t* set, siginfo_t* info);
        int sigtimewait(const sigset_t* set, siginfo_t* info, const struct timespec* timeout);
            ---------------------
            struct timespec
            {
                time_t tv_sec;
                long tv_nsec;
            }
        ---------------------
        set should be blocked before call sigwait/sigwaitinfo
    ---------------------
    signalfd (only for linux)
        sync wait for signal 
        ---------------------
        #include <sys/signalfd.h>
        int signalfd(int fd, const sigset_t* mask, int flags);
            flags 
                SFD_CLOEXEC
                SFD_NONBLOCK
            ---------------------
            struct signalfd_siginfo
            {
                ...
                ...
            }
            ---------------------
            mask should  be blocked before call signalfd 
        ---------------------
    ---------------------
    use signal as IPC 
------------------------------------------------
process-create
    #include <unistd.h>
    pid_t fork(void);
        ---------------------
        child-process shares the opened file-discriptor of parent-process (if no close-on-exec)
        so, process should close no needed file-discriptor
        ---------------------
        copy-on-write
    ---------------------
    #include <unistd.h>
    pid_t vfork(void)
        no-copy virtual-addr-page
        suspend parent-process until child-process call exec or _exit 
        child-process shares the .data, .bss, stack, .heap from parent-process
        ---------------------
        undefined-operation
            child-process modify parent-process's data 
            child-process return 
            child-process call other funtion before exec or _exit
            if call exec fails, should _exit
        ---------------------
        old way for process-create to get better performance
    ---------------------
    fork-race-condition
        whether parent-process or child-process is scheduled, is not determined.
        --------------------- 
        /proc/sys/kernel/sched_child_runs_first (only for linux since 2.6.32)
        ---------------------
        should use sync method to determine the order 
            semaphore/lock/pipe/signal
    ---------------------

